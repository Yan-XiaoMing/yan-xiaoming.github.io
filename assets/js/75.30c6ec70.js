(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{486:function(t,v,_){"use strict";_.r(v);var a=_(2),r=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"quic"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#quic"}},[t._v("#")]),t._v(" QUIC")]),t._v(" "),v("h3",{attrs:{id:"基于udp的传输协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基于udp的传输协议"}},[t._v("#")]),t._v(" 基于UDP的传输协议")]),t._v(" "),v("p",[t._v("QUIC是基于UDP在用户空间实现的传输协议。基于UDP意味着它使用UDP端口号来识别指定机器上的特定服务器。")]),t._v(" "),v("h3",{attrs:{id:"可靠性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#可靠性"}},[t._v("#")]),t._v(" 可靠性")]),t._v(" "),v("p",[t._v("虽然UDP不提供可靠的传输，但QUIC在基于UDP之时增加了一层带来可靠性的层。它提供了数据包重传、拥塞控制、调整传输节奏（pacing）以及其他一些TCP中存在的特性。")]),t._v(" "),v("p",[t._v("只要连接没有中断，从QUIC一端传输的数据迟早会出现在另一端。")]),t._v(" "),v("h3",{attrs:{id:"数据流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据流"}},[t._v("#")]),t._v(" 数据流")]),t._v(" "),v("p",[t._v("数据流（Streams）在QUIC中提供了一个轻量级、有序的字节流的抽象化。")]),t._v(" "),v("p",[t._v("QUIC中有两种基本的数据流类型：")]),t._v(" "),v("ul",[v("li",[t._v("从发起者到对等端（Peer）的单向数据流。")]),t._v(" "),v("li",[t._v("双向均可发出数据的双向数据流。")])]),t._v(" "),v("p",[t._v("连接端点的任意一方都可以建立这两种数据流，数据流之间可并行、交错地传输，并且可以被取消。")]),t._v(" "),v("p",[t._v("通过QUIC发送数据需要建立一个或多个数据流。")]),t._v(" "),v("p",[t._v("类似SSH和HTTP/2，QUIC在同一物理连接上可以有多个独立的逻辑数据流。这些数据流并行在同一个连接上传输，不影响其他流。")]),t._v(" "),v("p",[t._v("在已建立的连接上，双方均可以建立传输给对方的数据流。单一数据流的传输是可靠、有序的，但不同的数据流间可能无序传送。")]),t._v(" "),v("p",[t._v("QUIC可对连接和数据流分别进行流量控制（flow control）")]),t._v(" "),v("h3",{attrs:{id:"有序交付"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#有序交付"}},[t._v("#")]),t._v(" 有序交付")]),t._v(" "),v("p",[t._v("QUIC的单个数据流可以保证有序交付，但多个数据流之间可能乱序。这意味着单个数据流的传输是按序的，但是多个数据流中接收方收到的顺序可能与发送方的发送顺序不同.")]),t._v(" "),v("p",[t._v("举个例子：服务器传送流A和B到客户端。流A先启动，然后是流B。在QUIC中，丢包只会影响该包所处的流。如果流A发生了一次丢包，而流B没有，流B将继续传输直到结束，而流A将会进行丢包重传过程。而在HTTP/2中这不可能发生。")]),t._v(" "),v("p",[t._v("下图展示了连通两个QUIC端点的单一连接中的黄色与蓝色的数据流。它们互相独立，所以可能乱序到达，但是每个流内的信息将按序可靠到达。")]),t._v(" "),v("p",[v("img",{attrs:{src:"/img/937f353a7960a716f89b7b53f69b80cd_1783x330.png",alt:"img"}})]),t._v(" "),v("h2",{attrs:{id:"http-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-3"}},[t._v("#")]),t._v(" HTTP/3")]),t._v(" "),v("p",[t._v("使HTTP可以通过QUIC传输，协议的某些方面要进行修改，修改的结果便是HTTP/3。这些必要修改是因QUIC与TCP在某些性质上的不同所致，修改包括：")]),t._v(" "),v("ul",[v("li",[t._v("在QUIC中，数据流由传输层本身提供，而在HTTP/2中，流由HTTP层完成。")]),t._v(" "),v("li",[t._v("由于数据流互相独立，HTTP/2中使用的头部压缩算法如果不做改动，会造成队头阻塞。")]),t._v(" "),v("li",[t._v("QUIC流与HTTP/2略有不同。")])]),t._v(" "),v("h3",{attrs:{id:"与http-2的比较"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#与http-2的比较"}},[t._v("#")]),t._v(" 与HTTP/2的比较")]),t._v(" "),v("p",[t._v("HTTP/3面向QUIC设计，QUIC是一个自己处理数据流的传输层协议。")]),t._v(" "),v("p",[t._v("HTTP/2面向TCP设计，因此数据流在HTTP层处理。")]),t._v(" "),v("h4",{attrs:{id:"相似之处"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相似之处"}},[t._v("#")]),t._v(" 相似之处")]),t._v(" "),v("p",[t._v("这两个协议为客户端提供了几乎相同的功能集。")]),t._v(" "),v("ul",[v("li",[t._v("两者都提供数据流")]),t._v(" "),v("li",[t._v("两者都提供服务器推送")]),t._v(" "),v("li",[t._v("两者都有头部压缩，QPACK与HPACK的设计非常类似")]),t._v(" "),v("li",[t._v("两者都通过单一连接上的数据流提供复用")]),t._v(" "),v("li",[t._v("两者都提供数据流的优先度设置")])]),t._v(" "),v("h4",{attrs:{id:"不同之处"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不同之处"}},[t._v("#")]),t._v(" 不同之处")]),t._v(" "),v("p",[t._v("两个协议的主要不同点在于细节，不同之处主要由HTTP/3使用的QUIC带来。")]),t._v(" "),v("ul",[v("li",[t._v("得益于QUIC的0-RTT握手，HTTP/3可以提供更好的早期数据支持，而TCP快速打开和TLS通常只能传输更少的数据，且经常存在问题。")]),t._v(" "),v("li",[t._v("得益于QUIC，HTTP/3的握手速度比TCP+TLS快得多。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"/img/http3-wang-luo-xie-yi-xiang-jie-03.png",alt:"img"}})]),t._v(" "),v("ul",[v("li",[t._v("HTTP/3不存在明文的不安全版本。尽管在互联网上很少见，HTTP/2还是可以不配合HTTPS来实现和使用。")]),t._v(" "),v("li",[t._v("通过ALPN拓展，HTTP/2可以直接在TLS握手时进行协商。HTTP/3基于QUIC，所以需要凭借响应中的 "),v("code",[t._v("Alt-Svc:")]),t._v(" 头部来向客户端宣告。")])]),t._v(" "),v("h3",{attrs:{id:"http-3的批判"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-3的批判"}},[t._v("#")]),t._v(" HTTP/3的批判")]),t._v(" "),v("h4",{attrs:{id:"udp永远不会通"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#udp永远不会通"}},[t._v("#")]),t._v(" "),v("strong",[t._v("UDP永远不会通")])]),t._v(" "),v("p",[t._v("很多企业、运营商和组织对53端口（DNS）以外的UDP流量进行拦截或者限流，因为这些流量近来常被滥用于攻击。特别是一些现有的UDP协议和实现易受放大攻击（amplification attack）威胁，攻击者可以控制无辜的主机向受害者投放发送大量的流量。")]),t._v(" "),v("p",[t._v("QUIC内置了对放大攻击的缓解处理。它要求初始数据包不小于1200字节，并且协议中限制，服务器在未收到客户端回复的情况下，不能发送超过请求大小三倍的响应内容。")]),t._v(" "),v("h4",{attrs:{id:"内核处理udp很慢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内核处理udp很慢"}},[t._v("#")]),t._v(" "),v("strong",[t._v("内核处理UDP很慢")])]),t._v(" "),v("p",[t._v("UDP技术会发展，这些年开发者对UDP的重视程度也不够，这些东西都自不必说了。")]),t._v(" "),v("p",[t._v("对于大多数客户端来说，这个程度的“缓慢”从未被觉察到。")]),t._v(" "),v("h4",{attrs:{id:"quic太吃cpu"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#quic太吃cpu"}},[t._v("#")]),t._v(" "),v("strong",[t._v("QUIC太吃CPU")])]),t._v(" "),v("p",[t._v("类似上文的“UDP很慢”，一部分原因是TCP和TLS长期以来的成熟发展、改进，以及得到硬件协助，造成UDP看上去比较慢。")]),t._v(" "),v("p",[t._v("我们有理由期望这会随着时间得到改善。问题在于，这额外的CPU占用会对部署者带来多大的影响。")]),t._v(" "),v("h4",{attrs:{id:"只有google在弄"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#只有google在弄"}},[t._v("#")]),t._v(" "),v("strong",[t._v("只有Google在弄")])]),t._v(" "),v("p",[t._v("并非如此。Google通过大规模的部署证明，通过UDP部署这种协议可以正常运行且表现良好，这为IETF带来了初始的规范。")]),t._v(" "),v("p",[t._v("在那之后，很多公司和组织的人员都在这个利益方中立的IETF组织下推进标准化。在这个阶段，虽然Google的雇员也有参与，但Mozilla、Fastly、Cloudflare、Akamai、微软、Facebook、苹果等等很多公司的员工也参与进来，共同推进互联网的传输层协议。")]),t._v(" "),v("h4",{attrs:{id:"进步太小"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进步太小"}},[t._v("#")]),t._v(" "),v("strong",[t._v("进步太小")])]),t._v(" "),v("p",[t._v("这个是一个观点，而不是批评。也许进步是很小，这可能与相距HTTP/2的发布很近有着关系，时间太短了。")]),t._v(" "),v("p",[t._v("HTTP/3在高丢包的网络中可能表现更好，它提供了更快的握手，所以能改善可感知和实际的延迟。这些进步足够推动人们在服务器和服务上部署HTTP/3的支持吗？")])])}),[],!1,null,null,null);v.default=r.exports}}]);