(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{504:function(t,o,e){"use strict";e.r(o);var r=e(2),s=Object(r.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h2",{attrs:{id:"组件之间很难复用状态逻辑"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#组件之间很难复用状态逻辑"}},[t._v("#")]),t._v(" 组件之间很难复用状态逻辑")]),t._v(" "),o("p",[t._v("React 没有提供将可复用性行为“附加”到组件的途径，你也许会熟悉一些解决此类问题的方案，比如 "),o("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/render-props.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("render props"),o("OutboundLink")],1),t._v(" 和 "),o("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/higher-order-components.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("高阶组件"),o("OutboundLink")],1),t._v("。但是这类方案需要重新组织你的组件结构，这可能会很麻烦，使代码难以理解。")]),t._v(" "),o("p",[t._v("这样的情况下可以使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用。"),o("strong",[t._v("Hook 使你在无需修改组件结构的情况下复用状态逻辑。")])]),t._v(" "),o("h2",{attrs:{id:"复杂组件变得难以理解"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#复杂组件变得难以理解"}},[t._v("#")]),t._v(" 复杂组件变得难以理解")]),t._v(" "),o("p",[t._v("组件常常在 "),o("code",[t._v("componentDidMount")]),t._v(" 和 "),o("code",[t._v("componentDidUpdate")]),t._v(" 中获取数据。但是，同一个 "),o("code",[t._v("componentDidMount")]),t._v(" 中可能也包含很多其它的逻辑，如设置事件监听，而之后需在 "),o("code",[t._v("componentWillUnmount")]),t._v(" 中清除。相互关联且需要对照修改的代码被进行了拆分，而完全不相关的代码却在同一个方法中组合在一起。如此很容易产生 bug，并且导致逻辑不一致。")]),t._v(" "),o("p",[t._v("为了解决这个问题，"),o("strong",[t._v("Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）")]),t._v("，而并非强制按照生命周期划分。")]),t._v(" "),o("h2",{attrs:{id:"难以理解的-class"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#难以理解的-class"}},[t._v("#")]),t._v(" 难以理解的 class")]),t._v(" "),o("p",[t._v("class 是学习 React 的一大屏障。你必须去理解 JavaScript 中 "),o("code",[t._v("this")]),t._v(" 的工作方式，这与其他语言存在巨大差异。还不能忘记绑定事件处理器。")]),t._v(" "),o("p",[t._v("大家可以很好地理解 props，state 和自顶向下的数据流，但对 class 却一筹莫展。即便在有经验的 React 开发者之间，对于函数组件与 class 组件的差异也存在分歧，甚至还要区分两种组件的使用场景。")]),t._v(" "),o("p",[t._v("为了解决这些问题，"),o("strong",[t._v("Hook 使你在非 class 的情况下可以使用更多的 React 特性。")]),t._v(" 从概念上讲，React 组件一直更像是函数。而 Hook 则拥抱了函数，同时也没有牺牲 React 的精神原则。Hook 提供了问题的解决方案，无需学习复杂的函数式或响应式编程技术。")])])}),[],!1,null,null,null);o.default=s.exports}}]);