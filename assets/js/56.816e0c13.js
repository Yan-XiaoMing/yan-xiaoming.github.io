(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{467:function(t,a,v){"use strict";v.r(a);var s=v(2),_=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"基础-封装、抽象、继承、多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础-封装、抽象、继承、多态"}},[t._v("#")]),t._v(" 基础(封装、抽象、继承、多态)")]),t._v(" "),a("h3",{attrs:{id:"封装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),a("ul",[a("li",[t._v("What：隐藏信息，保护数据访问。")]),t._v(" "),a("li",[t._v("How：暴露有限接口和属性，需要编程语言提供访问控制的语法。")]),t._v(" "),a("li",[t._v("Why：提高代码可维护性；降低接口复杂度，提高类的易用性。")])]),t._v(" "),a("h3",{attrs:{id:"抽象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象"}},[t._v("#")]),t._v(" 抽象")]),t._v(" "),a("ul",[a("li",[t._v("What: 隐藏具体实现，使用者只需关心功能，无需关心实现。")]),t._v(" "),a("li",[t._v("How: 通过接口类或者抽象类实现，特殊语法机制非必须。")]),t._v(" "),a("li",[t._v("Why: 提高代码的扩展性、维护性；降低复杂度，减少细节负担。")])]),t._v(" "),a("h3",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),a("ul",[a("li",[t._v("What: 表示 is-a 关系，分为单继承和多继承。")]),t._v(" "),a("li",[t._v("How: 需要编程语言提供特殊语法机制。例如 Java 的 “extends”，C++ 的 “:”")]),t._v(" "),a("li",[t._v("Why: 解决代码复用问题。")])]),t._v(" "),a("h3",{attrs:{id:"多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),a("ul",[a("li",[t._v("What: 子类替换父类，在运行时调用子类的实现。")]),t._v(" "),a("li",[t._v("How: 需要编程语言提供特殊的语法机制。比如继承、接口类、duck-typing。")]),t._v(" "),a("li",[t._v("Why: 提高代码扩展性和复用性。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);